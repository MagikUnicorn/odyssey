plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
}

base.archivesName = project.archives_base_name
version = "$project.version+${libs.versions.minecraft.get()}"
group = project.maven_group

repositories {
	maven {
		url "https://maven.shedaniel.me/"
	}
	maven {
		url 'https://jitpack.io'
	}
	maven {
		name = 'TerraformersMC'
		url = 'https://maven.terraformersmc.com/'
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {

	minecraft libs.minecraft
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2"
		officialMojangMappings()
	}

	// Implementations

	modImplementation libs.quilt.loader
	modImplementation libs.quilted.fabric.api

	include modImplementation("maven.modrinth:chrysalis:${project.chrysalis_version}")

	modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}"
}

loom {
	accessWidenerPath = file("src/main/resources/odyssey.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching('quilt.mod.json') {
		expand 'version': version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 17
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {}
}