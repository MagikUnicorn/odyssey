plugins {
	id 'fabric-loom' version '1.1-SNAPSHOT'
	id 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		url "https://maven.shedaniel.me/"
	}
	maven {
		url "https://maven.terraformersmc.com/"
	}
	maven {
		url 'https://jitpack.io'
	}
	maven {
		url "https://cursemaven.com"
		content {includeGroup "curse.maven" }
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()

	// Implementations

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	include modImplementation("maven.modrinth:chrysalis:${project.chrysalis_version}")

	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
	modRuntimeOnly "maven.modrinth:modmenu:4.0.5"

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}"
}

loom {
	accessWidenerPath = file("src/main/resources/odyssey.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {}
}